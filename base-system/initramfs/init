#!/bin/sh

#	init
#	Init script for the initramfs. This script is compressed in the
#	initrd.img file which contains busybox and basic file system to
#	boot. It is loaded by the bootloader. During this process, the
#	init process will load some kernel modules in order to find the
#	huronOS disk by using the UUID provided by the bootloader.
#	Then, it will create the final union file system with AUFS,
#	making the .hsl (huronOS System Layer) files part of the final
#	file system to be chrooted.
#	After the execution of this init process, the regular systemd
# 	process is executed after the chroot.
#
#	Copyright (C) 2022, huronOS Project:
#		<http://huronos.org>
#
#	Licensed under the GNU GPL Version 2
#		<http://www.gnu.org/licenses/gpl-2.0.html>
#
#	Taken from the Slax project, authored by:
#		Tomas M <http://www.slax.org/>
#
#	Heavily modified and redistributed by the huronOS team:
#		Enya Quetzalli <equetzal@huronos.org>

## Set the initial PATH enviroment variable
export PATH=.:/:/usr/sbin:/usr/bin:/sbin:/bin

## Get the configuration set on the livekit, load shell functions
. /lib/config
. /lib/livekitlib

## Only print if we're on the initramfs and not over tmpfs
if [ ! -r /lib/initramfs_escaped ]; then
	echo "Starting huronOS"
fi

## Move the initramfs (fixed) to tmpfs, this will allow pivot_root command to work
transfer_initramfs

## AUFS mix lab
readonly MEMORY=/memory

## Dev mounts
readonly SYSTEM_MNT=$MEMORY/system
readonly EVENT_MNT=$MEMORY/event
readonly CONTEST_MNT=$MEMORY/contest

## Important dirs
readonly BASE_DIR="$SYSTEM_MNT/huronOS/base"
readonly DATA_DIR="$SYSTEM_MNT/huronOS/data"
readonly SOFTWARE_DIR="$SYSTEM_MNT/huronOS/software"
readonly ROOTCOPY_DIR="$SYSTEM_MNT/huronOS/rootcopy"

## Data dirs
readonly CONFIGS_DIR="$DATA_DIR/configs"
readonly DIRECTIVES_DIR="$DATA_DIR/directives"
readonly FILES_DIR="$DATA_DIR/files"
readonly JOURNAL_DIR="$DATA_DIR/journal"
readonly LOGS_DIR="$DATA_DIR/logs"

## Software dirs
readonly INTERNET_DIR="$SOFTWARE_DIR/internet"
readonly LANGS_DIR="$SOFTWARE_DIR/langs"
readonly PROGRAMMING_DIR="$SOFTWARE_DIR/programming"
readonly TOOLS_DIR="$SOFTWARE_DIR/tools"

## AUFS branches
# syschanges/ branch will hold all the system-created
# changes that are necesary to boot, like the procfs, sysfs, etc.
# also, is the default place to copy up from lower readonly branches.
# eg. if /etc/fstab is edited, the modification will be writted in this branch.
readonly SYSCHANGES=$MEMORY/syschanges

# userchanges/ branch, is where all the newly-created files
# will be stored, it can be bind to a device to setup persistence
# or it can use ram to drop changes after reboot.
# This branch should be mounted AFTER boot on chroot over AUFS union.
readonly USRCHANGES=$MEMORY/usrchanges

# base/ is not branch, but the directory where the base modules branches
# should be mounted and then appended to the AUFS union.
readonly BASE_MNT=$MEMORY/base

# modules/ is not branch, but the directory where any other module that is
# not essential for huronOS will be mounted and then appended to the AUFS union.
readonly MODULES_MNT=$MEMORY/modules

## AUFS resulting union
readonly UNION=$MEMORY/union

## Print init process to user
header "huronOS Init process <https://huronos.org/>"

echo "huronOS build number $(cat /os-release | grep BUILD_ID | cut -d= -f2)"

echo "Creating target filesystem"

## Mount the virtual filesystems
init_proc_sysfs

## Init debug, then promt debug
debug_start
debug_shell

## Load basic devices kernel modules, verify AUFS availability and set RAM compression
init_devs
init_aufs
# init_zram
debug_shell

## Load all the available kernel modules, skip network.
load_kernel_modules -v /drivers/net/
debug_shell

## Find the system data and the base huron software modules
find_data 45
debug_shell

## Setup persistent changes
persistent_changes
debug_shell

## copy to RAM if needed
# TODO: Check if this feature will be supported by huronOS
# 		huronOS software is not -that- light, so this may not be a good idea
#		for school computers which rarely have a big amount of RAM.
# DATA="$(copy_to_ram "$DATA" "$CHANGES")"
# debug_shell

## Mount the base system modules
mount_modules
debug_shell

## Init the empty AUFS union for later chroot
init_union
debug_shell

## Append the base modules of huronOS to the union
union_append_modules "$BASE_MNT"
debug_shell

## Rootcopy content to huronOS
# TODO: Check if this feature will be supported by huronOS
# 		this can mean a security hole for contestants being able to
#		easily add files to the rootcopy dir and gain root access.
copy_rootcopy_content "$ROOTCOPY_DIR" "$UNION"
# debug_shell

activate_journal_persistence "$JOURNAL_DIR" "$UNION"

## Create the fstab so that systemd mount filesystems at boot.
fstab_create
debug_shell

## Run user custom preinit script
# TODO: Check if this feature will be supported by huronOS
# 		this can mean a security hole for contestants being able to
#		easily change essencial huronOS configurations.
# user_preinit "$DATA" "$UNION"
# debug_shell

header "huronOS ready!, starting contest enviroment"
header "Keep Training!"

## Move the temporal ram disk system to the real huronOS system.
change_root

## Adding open exclamation to surprise non-spanish speakers lol.
header "¡¡ERROR occured, you shouldn't be here!! e.e"
/bin/sh
