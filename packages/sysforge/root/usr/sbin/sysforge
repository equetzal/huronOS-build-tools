#!/bin/bash

#	sysforge
#	Script to prepare the system to build the upper system-layers
# 	and the software-modules automatically
#
#	Copyright (C) 2024, huronOS Project:
#		<http://huronos.org>
#
#	Licensed under the GNU GPL Version 2
#		<http://www.gnu.org/licenses/gpl-2.0.html>
#
#	Authors:
#		Enya Quetzalli <equetzal@huronos.org>

. /usr/lib/hos/enviroment.sh

## Print functions
BOLD="$(tput bold)"
BOLD_GREEN="$(tput setab 2)$(tput bold)"
BOLD_RED="$(tput setab 2)$(tput setaf 1)$(tput bold)"
NORMAL_TEXT="$(tput sgr0)"
print_bold() {
	echo -e "${BOLD}$1${NORMAL_TEXT}" | tee -a "$SYSTEM_MNT"/sysforge-wizard.log
}
print_bold_red() {
	echo -e "${BOLD_RED}$1${NORMAL_TEXT}" | tee -a "$SYSTEM_MNT"/sysforge-wizard.log
}
print_step() {
	echo -e "${BOLD_GREEN}$1${NORMAL_TEXT}" | tee -a "$SYSTEM_MNT"/sysforge-wizard.log
}
print_text() {
	echo -e "$1" | tee -a "$SYSTEM_MNT"/sysforge-wizard.log
}
exit_error() {
	print_text "$1"
	exit 1
}

enqueue_scripts() {
	SCRIPTS_LIST="$1"
	print_text "Processing list $SCRIPTS_LIST"

	while IFS="" read -r line || [ -n "$line" ]; do
		SCRIPT_DIRECTORY="$(dirname "$line")"
		SCRIPT_NAME="$(basename "$line")"

		print_text "Creating $SCRIPT_NAME"
		cat <<EOL >"$SYSTEM_BUILD_CONTROL_DIR/$SCRIPT_NAME"
#!/bin/bash
cd "$PATH_TO_HBT/$SCRIPT_DIRECTORY"
. ./$SCRIPT_NAME
quick-reboot
EOL

		print_text "Adding $SCRIPT_NAME to the build queue"
		echo "$SCRIPT_NAME" | tee -a "$SYSTEM_BUILD_CONTROL_DIR/queue"

	done <"$SCRIPTS_LIST"
}

## Test if the script is started by root user. If not, exit
## only root user can manipulate the device as required.
if [ "0$UID" -ne 0 ]; then
	echo "Only root can run $(basename $0)"
	exit 1
fi

if [ -z "$1" ]; then
	echo "Missing build option"
	echo "Run: sysforge --help"
	exit 1
fi

# TODO: Validate we're running on no-sync mode

## Argument handling
BUILD_SYSTEM_LAYERS="false"
BUILD_SOFTWARE_MODULES="false"
while [ "$#" -gt 0 ]; do
	case "$1" in
	--system-layers)
		BUILD_SYSTEM_LAYERS="true"
		shift 1
		;;
	--software-modules)
		BUILD_SOFTWARE_MODULES="true"
		shift 1
		;;
	-h | --help)
		echo "Sysforge builds the system upper layers and/or software modules automatically"
		echo "Usage: sysforge [--system-layers] [--software-modules]"
		exit 1
		;;
	#   Whichever other parameter passed, we know nothing about that here
	*)
		echo "Unknown build uption"
		echo "Run: sysforge --help"
		exit 1
		;;
	esac
done

## Read data from user that should automate things
print_step "[1/7] Configuring huronOS-build-tools (HBT) source"
read -e -r -p "Path to disk containing HBT repo: " DISK_WITH_HBT
read -e -r -p "Mount point for disk: " DISK_MOUNT_POINT
read -e -r -p "Path of mounted HBT directory: " PATH_TO_HBT
print_text "Configuration:"
print_text "DISK_WITH_HBT=$DISK_WITH_HBT"
print_text "DISK_MOUNT_POINT=$DISK_MOUNT_POINT"
print_text "PATH_TO_HBT=$PATH_TO_HBT"

read -r -p "Please confirm all data is correct, do you want to continue? (Y/n) " CONFIRM

## Exit if answer is not Y or y
if [ "$CONFIRM" != "Y" ] && [ "$CONFIRM" != "y" ]; then
	print_step "Exiting installer"
	exit 1
fi

## Use a build-control directory that is natively persistent
print_step "[2/7] Creating the persistent build-control directory"
mkdir -p "$SYSTEM_BUILD_CONTROL_DIR"
echo "Creating $SYSTEM_BUILD_CONTROL_DIR"

## Create the mount script
print_step "[3/7] Automating HBT boot mount"
cat <<EOL >"$SYSTEM_BUILD_CONTROL_DIR/mount.sh"
#!/bin/bash
mkdir -p "$DISK_MOUNT_POINT"
mount "$DISK_WITH_HBT" "$DISK_MOUNT_POINT"
cd "$PATH_TO_HBT"
EOL

## Create the build scripts
print_step "[4/7] Creating build scripts"
if [ "$BUILD_SYSTEM_LAYERS" = "true" ]; then
	enqueue_scripts "/usr/lib/sysforge/system-layers.list"
fi
if [ "$BUILD_SOFTWARE_MODULES" = "true" ]; then
	enqueue_scripts "/usr/lib/sysforge/software-modules.list"
fi

print_step "[5/7] Creating the sysforge boot wizard"
cat <<EOL >"/etc/systemd/system/sysforge-wizard.service"
[Unit]
Description=Automate system builds
After=getty.target
After=systemd-logind.service

[Service]
User=root
Group=root
ExecStart=/usr/lib/sysforge/sysforge-wizard.sh

[Install]
WantedBy=multi-user.target
EOL

systemctl daemon-reload
systemctl enable sysforge-wizard.service
systemctl mask getty@tty1.service
systemctl mask console-getty.service

## Create helper HSL
print_step "[6/7] Creating temporal system-layer"
NAME="09-sysforge-wizard"
savechanges /tmp/$NAME.hsm
hsm2dir /tmp/$NAME.hsm
rm -rf /tmp/$NAME.hsm/var
rm -rf /tmp/$NAME.hsm/run
rm -rf /tmp/$NAME.hsm/media
rm -rf /tmp/$NAME.hsm/tmp
rm -rf /tmp/$NAME.hsm/sys
rm -rf /tmp/$NAME.hsm/proc
rm -rf /tmp/$NAME.hsm/dev
rm -rf /tmp/$NAME.hsm/etc/fstab
rm -rf /tmp/$NAME.hsm/usr
dir2hsm /tmp/$NAME.hsm
mv "/tmp/$NAME.hsm" "/tmp/$NAME.hsl"
mv "/tmp/$NAME.hsl" "$SYSTEM_BASE_DIR/"

print_step "[7/7] Rebooting into wizard"
quick-reboot
