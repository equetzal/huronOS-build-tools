#!/bin/bash

#	hos-wallpaper.sh
#	This tool automate the download of wallpapers, its hash vertification,
#	prevents re-downloading the same previusly-downloaded wallpapers, stores
# 	the wallpapers persistently and prevents deletion on modality change.
#	It can also be executed in background with the happly-wallpaper service.
#
#	Copyright (C) 2022, huronOS Project:
#		<http://huronos.org>
#
#	Licensed under the GNU GPL Version 2
#		<http://www.gnu.org/licenses/gpl-2.0.html>
#
#	Authors:
#		Enya Quetzalli <equetzal@huronos.org>

# shellcheck source=/dev/null
. /usr/lib/hos/enviroment.sh
. /usr/lib/hos/utils.sh

## Help function
help() {
	echo "huronOS Wallpaper Tool"
	echo "This tool will help you to update the wallpapers of the system"
	echo "it can be automatically using the directives file, or manually."
	echo
	echo "Syntax: hos-wallpaper [operation]"
	echo
	echo "operations:"
	printf '%-30.30s\t%s\n' "--help" "Display this help and exit."
	printf '%-30.30s\t%s\n' "--automatic" "Automatically download and set the wallpapers in directives."
	#	printf '%-30.30s\t%s\n' 	"--manual [Mode] [URL]"	"Add the provided module to the root AUFS union."
	echo
	#	echo "options:"
	#	printf '%-5.5s\t%s\n'	"-s"	"Do operations silently."
	#	printf '%-5.5s\t%s\n'	"-p"	"Save wallpapers persistently"
}

main() {
	local SET_MODE

	while (($#)); do
		case $1 in
		"--help")
			help
			exit 0
			;;
		"--manual")
			SET_MODE="$2"
			shift 2
			;;
		"--automatic")
			SET_MODE="$(hos-dmode)"
			shift 1
			;;
		*)
			echo "Unknown operation '$1', please run [hos-wallpaper --help] for help"
			exit 1
			;;
		esac
	done

	if [ -z "${SET_MODE}" ]; then
		echo "Mode to apply not specified, please run [hos-wallpaper --help] for help"
		exit 1
	fi

	check_wallpapers "$SET_MODE"
}

# $1 = Wallpaper Section
# $2 = Current Mode
prepare_wallpaper() {
	local SECTION CURRENT_MODE WALLPAPER_URL WALLPAPER_HASH FILE_TYPE SAVE_FILE CURRENT_WALLPAPER
	SECTION="$1"
	CURRENT_MODE="$2"
	WALLPAPER_URL="$(dvar --variable-name Wallpaper --section "$SECTION")"
	WALLPAPER_HASH="$(dvar --variable-name WallpaperSha256 --section "$SECTION")"
	BASENAME="$(basename "$WALLPAPER_URL")"
	FILE_TYPE="${BASENAME##*.}"
	SAVE_FILE="$SYSTEM_BACKUP_FILES_DIR/${SECTION}-mode-wallpaper.${FILE_TYPE}"

	## If no URL setup or default is selected, use default wallpaper
	if [ -z "$WALLPAPER_URL" ] || [ "$WALLPAPER_URL" = "default" ]; then
		BASENAME="$(basename "$DEFAULT_WALLPAPER_FILE")"
		FILE_TYPE="${BASENAME##*.}"
		SAVE_FILE="$SYSTEM_BACKUP_FILES_DIR/${SECTION}-mode-wallpaper.${FILE_TYPE}"
		cp -f "$DEFAULT_WALLPAPER_FILE" "$SAVE_FILE"
	## If current file is not valid
	elif should_redownload_file "$SAVE_FILE" "$WALLPAPER_URL" "$WALLPAPER_HASH"; then
		## Download the file
		if ! safe_download "$WALLPAPER_URL" "$SAVE_FILE" "$WALLPAPER_HASH"; then
			## If not successfull, leave the file as it is unless there is no file
			if [ ! -f "$SAVE_FILE" ]; then
				## Set default wallpaper
				BASENAME="$(basename "$DEFAULT_WALLPAPER_FILE")"
				FILE_TYPE="${BASENAME##*.}"
				SAVE_FILE="$SYSTEM_BACKUP_FILES_DIR/${SECTION}-mode-wallpaper.${FILE_TYPE}"
				cp -f "$DEFAULT_WALLPAPER_FILE" "$SAVE_FILE"
			fi
		fi
	fi

	if [ "$SECTION" = "$CURRENT_MODE" ]; then
		## Set the wallpaper as current
		CURRENT_WALLPAPER="$CURRENT_WALLPAPERS_DIR/$$-current-wallpaper.${FILE_TYPE}"
		cp -f "$SAVE_FILE" "$CURRENT_WALLPAPER"
		chmod 777 "$CURRENT_WALLPAPER"
		su contestant -c "export DISPLAY=:0; gsettings set org.gnome.desktop.background picture-uri file://$CURRENT_WALLPAPER"
		## Delete previous wallpapers
		find "$CURRENT_WALLPAPERS_DIR/" | grep "current-wallpaper" | grep -v $$ | xargs -n 1 rm -f
	fi

}

# $1 = Current Mode
check_wallpapers() {
	local CURRENT_MODE
	CURRENT_MODE="$1"

	## Check for Always mode
	prepare_wallpaper "Always" "$CURRENT_MODE"

	## Check for Event mode
	prepare_wallpaper "Event" "$CURRENT_MODE"

	## Check for Contest mode
	prepare_wallpaper "Contest" "$CURRENT_MODE"
}

main "$@"
exit 0
