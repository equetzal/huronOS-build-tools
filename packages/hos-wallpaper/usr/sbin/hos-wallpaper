#!/bin/bash

#	hos-wallpaper.sh
#	This tool automate the download of wallpapers, its hash vertification,
#	prevents re-downloading the same previusly-downloaded wallpapers, stores
# 	the wallpapers persistently and prevents deletion on modality change.
#	It can also be executed in background with the happly-wallpaper service.
#
#	Copyright (C) 2022, huronOS Project:
#		<http://huronos.org>
#
#	Licensed under the GNU GPL Version 2
#		<http://www.gnu.org/licenses/gpl-2.0.html>
#
#	Authors:
#		Enya Quetzalli <equetzal@huronos.org>

## Help function
help() {
	echo "huronOS Wallpaper Tool"
	echo "This tool will help you to update the wallpapers of the system"
	echo "it can be automatically using the directives file, or manually."
	echo
	echo "Syntax: hos-wallpaper [operation]"
	echo
	echo "operations:"
	printf '%-30.30s\t%s\n' "--help" "Display this help and exit."
	printf '%-30.30s\t%s\n' "[ --target-mode | -m ] MODE" "Try to apply the wallpaer for the specified Mode."
	printf '%-30.30s\t%s\n' "--wallpaper-url URL" "The url to retrieve the wallpaper from."
	printf '%-30.30s\t%s\n' "--wallpaper-hash HASH" "The hash to check the downloaded wallpaper against."
	echo
}

## Download and saves a file given a URL and it's sha256 hash
## asuming that all parameters are provided and URLs are valid
# $1 = URL of image
# $2 = File path to save
# $3 = Sha256 of wallpaper
safe_download() {
	local FILE_URL SAVE_PATH FILE_HASH FILE_NAME TMP TMP_FILE TMP_HASH_FILE
	FILE_URL="$1"
	SAVE_PATH="$2"
	FILE_HASH="$3"
	FILE_NAME=$(basename "$FILE_URL")
	TMP="/tmp/safe-download-$$"
	TMP_FILE="$TMP/$FILE_NAME"
	TMP_HASH_FILE="$TMP/${FILE_NAME}.sha256"

	## Try the download into temp
	mkdir -p "$TMP"
	if ! wget --no-cache --tries=3 --timeout=10 "$FILE_URL" -O "$TMP_FILE"; then
		echo "Cannot download the requested url $FILE_URL" 1>&2
		rm -rf "$TMP"
		return 1 # Error
	fi

	pushd "$TMP" || exit 1
	## Write hash into hash file
	echo "$FILE_HASH  $FILE_NAME" >"$TMP_HASH_FILE"
	## If hash does not match, do not save file
	pushd "$TMP" || exit 1
	if ! sha256sum --status --check "$TMP_HASH_FILE"; then
		echo "Downloaded file does not match it's hash, aborting. $FILE_URL" 1>&2
		popd || exit 1
		rm -rf "$TMP"
		return 1 # Error
	fi
	popd || exit 1

	## Everything seems to be fine, copy file to final path
	cp -f "$TMP_FILE" "$SAVE_PATH"
	rm -rf "$TMP"
	echo "Successfully downloaded file $SAVE_PATH"
	return 0 # Success
}

## Given a file and it's hash, returns if it should redownload a file or not
# $1 = Saved file path
# $2 = URL of wallpaper
# $3 = Sha256 of wallpaper
should_redownload_file() {
	local FILE_PATH FILE_URL FILE_HASH FILE_NAME TMP TMP_FILE TMP_HASH_FILE
	FILE_PATH="$1"
	FILE_URL="$2"
	FILE_HASH="$3"
	FILE_NAME=$(basename "$FILE_URL")
	## Get the basename of the wallpaper as mentioned in the hash
	TMP="/tmp/verify-download-$$"
	TMP_FILE="$TMP/$FILE_NAME"
	TMP_HASH_FILE="$TMP/${FILE_NAME}.sha256"

	## If file does not exists, then yes, we need to redownload it.
	if [ ! -f "$FILE_PATH" ]; then
		return 0 # Yes, download
	fi

	mkdir -p "$TMP"
	## Copy local file to match hash file name
	cp -f "$FILE_PATH" "$TMP_FILE"

	pushd "$TMP" || exit 1
	## Write hash into hash file
	echo "$FILE_HASH  $FILE_NAME" >"$TMP_HASH_FILE"
	## If the local file does not match the hash, we need to redownload the file
	if ! sha256sum --status --check "$TMP_HASH_FILE"; then
		echo "Local file does not match remote hash, file is not the same." 1>&2
		popd || exit 1
		rm -rf "$TMP"
		return 0 # Yes, download
	fi
	popd || exit 1

	## Hash stills the same, so current file stills valid.
	rm -rf "$TMP"
	return 1 # No download
}

default_wallpaper() {
	DEFAULT_WALLPAPER_FILE="/usr/share/backgrounds/huronos-background.png"
	BASENAME="$(basename "$DEFAULT_WALLPAPER_FILE")"
	FILE_TYPE="${BASENAME##*.}"
	SAVE_FILE="$SYSTEM_BACKUP_FILES_DIR/${CURRENT_MODE}-mode-wallpaper.${FILE_TYPE}"
	cp -f "$DEFAULT_WALLPAPER_FILE" "$SAVE_FILE"
}

main() {
	local CURRENT_MODE WALLPAPER_URL WALLPAPER_HASH

	# If no arguments, show help
	if [ "$#" -eq 0 ]; then
		help
		exit 0
	fi

	while (($#)); do
		case $1 in
		"--help")
			help
			exit 0
			;;
		"--target-mode" | "-m")
			CURRENT_MODE="$2"
			shift 2
			;;
		"--wallpaper-url" | "-u")
			WALLPAPER_URL="$2"
			shift 2
			;;
		"--wallpaper-hash" | "-h")
			WALLPAPER_HASH="$2"
			shift 2
			;;
		*)
			echo "Unknown operation '$1', please run [hos-wallpaper --help] for help"
			exit 1
			;;
		esac
	done

	if [ -z "${CURRENT_MODE}" ]; then
		echo "Mode to apply not specified, "
		exit 1
	fi

	if [ -z "${WALLPAPER_URL}" ]; then
		echo "File URL not specified, "
		exit 1
	fi
	if [ -z "${WALLPAPER_HASH}" ]; then
		echo "File hash not specified, "
		exit 1
	fi
	if [ -z "$CURRENT_MODE" ] || [ -z "$WALLPAPER_URL" ] || [ -z "$WALLPAPER_HASH" ]; then
		echo "Missing arguments, please run [hos-wallpaper --help] for help"
		exit 1
	fi

	# prepare_wallpaper "$CURRENT_MODE" "$WALLPAPER_URL" "$WALLPAPER_HASH"

	local FILE_TYPE SAVE_FILE CURRENT_WALLPAPER
	BASENAME="$(basename "$WALLPAPER_URL")"
	FILE_TYPE="${BASENAME##*.}"
	SAVE_FILE="$SYSTEM_BACKUP_FILES_DIR/${CURRENT_MODE}-mode-wallpaper.${FILE_TYPE}"

	## If no URL setup or default is selected, use default wallpaper
	if [ -z "$WALLPAPER_URL" ] || [ "$WALLPAPER_URL" = "default" ]; then
		default_wallpaper
	## If current file is not valid
	elif should_redownload_file "$SAVE_FILE" "$WALLPAPER_URL" "$WALLPAPER_HASH"; then
		## Try to download the file
		safe_download "$WALLPAPER_URL" "$SAVE_FILE" "$WALLPAPER_HASH"
		DOWNLOAD_STATUS=$?
		## If not successfull, and no previous wallpaper exists, set default wallpaper
		if [ $DOWNLOAD_STATUS -ne 0 ] && [ ! -f "$SAVE_FILE" ]; then
			## Set default wallpaper
			default_wallpaper
		fi
	fi

	## Set the wallpaper as current
	CURRENT_WALLPAPERS_DIR="/usr/share/backgrounds"
	CURRENT_WALLPAPER="$CURRENT_WALLPAPERS_DIR/$$-current-wallpaper.${FILE_TYPE}"
	cp -f "$SAVE_FILE" "$CURRENT_WALLPAPER"
	chmod 777 "$CURRENT_WALLPAPER"
	su contestant -c "export DISPLAY=:0; gsettings set org.gnome.desktop.background picture-uri file://$CURRENT_WALLPAPER"
	## Delete previous wallpapers
	find "$CURRENT_WALLPAPERS_DIR/" | grep "current-wallpaper" | grep -v $$ | xargs -n 1 rm -f
}

main "$@"
exit 0
